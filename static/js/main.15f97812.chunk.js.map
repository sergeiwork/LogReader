{"version":3,"sources":["components/Graph.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["GraphPoint","Time","Timestamp","CreateGraphPoint","timeStamp","time","lines","result","forEach","line","Graph","props","useState","graphData","setGraphData","useEffect","newGraph","Array","newPoint","LogLines","log","worker","Properties","WorkerName","Level","getHours","Math","floor","getMinutes","padStart","push","getTime","Workers","current","isNaN","includes","width","height","data","style","zIndex","strokeDasharray","dataKey","map","w","type","stroke","random","toString","format","str","obj","Object","keys","key","replace","RegExp","App","fileInput","createRef","fileLines","setFileLines","logLines","setLogLines","Map","exceptions","setExceptions","workers","setWorkers","applicationSessionIds","setApplicationSessionIds","applicationSessionIdTimestamps","setApplicationSessionIdTimestamps","loading","setLoading","showingClipBoardAlert","setShowingClipBoardAlert","filterExceptions","setFilterExceptions","filterExceptionsRegex","setFilterExceptionsRegex","filterWorkers","setFilterWorkers","filterApplicationSessionIds","setFilterApplicationSessionIds","Date","filterStartDate","setFilterStartDate","filterEndDate","setFilterEndDate","filterExceptionsStaging","setFilterExceptionsStaging","filterExceptionsRegexStaging","setFilterExceptionsRegexStaging","filterWorkersStaging","setFilterWorkersStaging","filterApplicationSessionIdsStaging","setFilterApplicationSessionIdsStaging","filterModified","setFilterModified","viewLogLines","setViewLogLines","currentPage","setCurrentPage","loadingProgress","setLoadingProgress","loadingTotal","setLoadingTotal","currentFile","setCurrentFile","onDrop","useCallback","files","length","loadFile","useDropzone","getRootProps","getInputProps","isDragActive","objects","filter","l","trim","i","JSON","parse","Message","MessageTemplate","Exception","Id","RawLine","newExceptions","newWorkers","newApplicationSessionIds","exception","split","has","set","get","applicationSessionId","ApplicationSessionId","from","newApplicationSessionIdTimestamps","reduce","sessionId","date","applyFilters","match","file","chunkSize","totalChunks","size","currentChunk","name","reader","FileReader","addEventListener","event","console","error","target","readAsText","slice","min","className","position","left","top","color","Alert","isOpen","ref","disabled","accept","Spinner","Progress","value","max","round","id","Button","onClick","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","Label","Input","onChange","e","Table","striped","bordered","display","flexDirection","outline","marginRight","sort","k","checked","s","a","b","selected","showTimeSelect","timeFormat","dateFormat","pageCount","onPageChange","forcePage","disableInitialCallback","pageRangeDisplayed","marginPagesDisplayed","breakClassName","breakLinkClassName","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","activeClassName","_","wordWrap","navigator","clipboard","writeText","setTimeout","toLocaleString","MetricName","ConcurrentTaskIndex","WorkItemKey","whiteSpace","document","getElementById","scrollIntoView","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.15f97812.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Legend,\r\n  Line,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { LogLine } from \"../App\";\r\n\r\nclass GraphPoint {\r\n  public Time: string = \"00\";\r\n  public Timestamp: number = 0;\r\n  [key: string]: number | string;\r\n}\r\n\r\nfunction CreateGraphPoint(\r\n  timeStamp: number,\r\n  time: string,\r\n  lines: string[]\r\n): GraphPoint {\r\n  let result = new GraphPoint();\r\n  result.Timestamp = timeStamp;\r\n  result.Time = time;\r\n  lines.forEach((line) => {\r\n    result[line] = 0;\r\n  });\r\n  return result;\r\n}\r\n\r\nclass GraphProps {\r\n  LogLines: LogLine[] = [];\r\n  Workers: string[] = [];\r\n}\r\n\r\nfunction Graph(props: GraphProps) {\r\n  const [graphData, setGraphData] = useState<GraphPoint[]>([]);\r\n\r\n  useEffect(() => {\r\n    const newGraph = new Array<GraphPoint>();\r\n    let newPoint = new GraphPoint();\r\n    for (let log of props.LogLines) {\r\n      let worker = (log.Properties?.WorkerName ?? \"General\") + \" \" + log.Level;\r\n      let time =\r\n        log.Timestamp.getHours() +\r\n        \":\" +\r\n        (Math.floor(log.Timestamp.getMinutes() / 10) * 10 + \"\").padStart(\r\n          2,\r\n          \"0\"\r\n        );\r\n      if (time !== newPoint.Time) {\r\n        if (newPoint.Time !== \"\") {\r\n          newGraph.push(newPoint);\r\n        }\r\n        newPoint = CreateGraphPoint(\r\n          log.Timestamp.getTime(),\r\n          time,\r\n          props.Workers\r\n        );\r\n      }\r\n      let current = newPoint[worker] as number;\r\n      newPoint[worker] = (isNaN(current) ? 0 : current) + 1;\r\n    }\r\n    if (!newGraph.includes(newPoint)) newGraph.push(newPoint);\r\n    setGraphData(newGraph);\r\n  }, [props.LogLines, props.Workers]);\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={400}>\r\n      <LineChart\r\n        data={graphData}\r\n        height={300}\r\n        width={1000}\r\n        style={{ zIndex: 100 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"Time\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        {props.Workers.map((w) => (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey={w}\r\n            stroke={\"#\" + Math.floor(Math.random() * 16777215).toString(16)}\r\n            key={w}\r\n          />\r\n        ))}\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","import React, {\r\n  createRef,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n  version,\r\n} from \"react\";\r\nimport { Alert, Button, Input, Label, Progress, Spinner, Table } from \"reactstrap\";\r\nimport \"./App.css\";\r\nimport Graph from \"./components/Graph\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\ninterface ILogLineProperties {\r\n  SourceContext: string;\r\n  ElapsedMilliseconds: number;\r\n  MetricName: string;\r\n  WorkItemKey: string;\r\n  ConcurrentTaskIndex: number;\r\n  WorkerSessionId: string;\r\n  WorkerName: string;\r\n  AssemblyName: string;\r\n  AssemblyVersion: string;\r\n  MachineName: string;\r\n  EnvironmentUserName: string;\r\n  ApplicationSessionId: string;\r\n}\r\n\r\nclass LogLine {\r\n  Timestamp: Date = new Date();\r\n  Level: string = \"\";\r\n  Message: string = \"\";\r\n  Exception: string = \"\";\r\n  Id: number = 0;\r\n  Properties: ILogLineProperties | null = null;\r\n  RawLine: string = \"\";\r\n}\r\n\r\nconst format = (str: string, obj: any): string => {\r\n  Object.keys(obj).forEach((key) => {\r\n    str = str.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"gi\"), obj[key]);\r\n  });\r\n\r\n  return str;\r\n};\r\n\r\nfunction App() {\r\n  const versionNumber = \"0.5.3\";\r\n\r\n  const fileInput = createRef<HTMLInputElement>();\r\n  const [fileLines, setFileLines] = useState<string[]>([]);\r\n  const [logLines, setLogLines] = useState<LogLine[]>([]);\r\n\r\n  const [exceptions, setExceptions] = useState(new Map<string, number>());\r\n  const [workers, setWorkers] = useState(new Map<string, number>());\r\n  const [applicationSessionIds, setApplicationSessionIds] = useState(\r\n    new Map<string, number>()\r\n  );\r\n  const [applicationSessionIdTimestamps, setApplicationSessionIdTimestamps] =\r\n    useState(new Map<string, Date>());\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [showingClipBoardAlert, setShowingClipBoardAlert] = useState(false);\r\n\r\n  const [filterExceptions, setFilterExceptions] = useState<string[]>([]);\r\n  const [filterExceptionsRegex, setFilterExceptionsRegex] =\r\n    useState<string>(\"\");\r\n  const [filterWorkers, setFilterWorkers] = useState<string[]>([]);\r\n  const [filterApplicationSessionIds, setFilterApplicationSessionIds] =\r\n    useState<string[]>([]);\r\n  const [filterStartDate, setFilterStartDate] = useState<Date>(new Date(0));\r\n  const [filterEndDate, setFilterEndDate] = useState<Date>(new Date(0));\r\n\r\n  const [filterExceptionsStaging, setFilterExceptionsStaging] = useState<\r\n    string[]\r\n  >([]);\r\n  const [filterExceptionsRegexStaging, setFilterExceptionsRegexStaging] =\r\n    useState<string>(\"\");\r\n  const [filterWorkersStaging, setFilterWorkersStaging] = useState<string[]>(\r\n    []\r\n  );\r\n  const [\r\n    filterApplicationSessionIdsStaging,\r\n    setFilterApplicationSessionIdsStaging,\r\n  ] = useState<string[]>([]);\r\n  const [filterModified, setFilterModified] = useState(false);\r\n\r\n  const [viewLogLines, setViewLogLines] = useState<LogLine[]>([]);\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n\r\n  const [loadingProgress, setLoadingProgress] = useState<number>(0);\r\n  const [loadingTotal, setLoadingTotal] = useState<number>(0);\r\n\r\n  const [currentFile, setCurrentFile] = useState(\"\");\r\n\r\n  const onDrop = useCallback((files: File[]) => {\r\n    if (files.length === 1) {\r\n      loadFile(files[0]);\r\n    }\r\n  }, []);\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  useEffect(\r\n    () => setFilterModified(true),\r\n    [\r\n      filterExceptionsStaging,\r\n      filterExceptionsRegexStaging,\r\n      filterWorkersStaging,\r\n      filterApplicationSessionIdsStaging,\r\n    ]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (loading) return;\r\n\r\n    var objects = fileLines\r\n      .filter((l) => l.trim().length > 0)\r\n      .map<LogLine | null>((l, i) => {\r\n        try {\r\n          const obj = JSON.parse(l);\r\n          return {\r\n            Timestamp: new Date(obj.Timestamp),\r\n            Level: obj.Level,\r\n            Message: format(obj.MessageTemplate, obj.Properties),\r\n            Exception: obj.Exception,\r\n            Id: i,\r\n            Properties: obj.Properties,\r\n            RawLine: l\r\n          };\r\n        } catch {\r\n          return null;\r\n        }\r\n      })\r\n      .filter((l) => l !== null)\r\n      .map<LogLine>((l) => l!);\r\n\r\n    const newExceptions = new Map<string, number>();\r\n    const newWorkers = new Map<string, number>();\r\n    const newApplicationSessionIds = new Map<string, number>();\r\n\r\n    for (let log of objects) {\r\n      if (log.Exception) {\r\n        let exception = log.Exception.split(\" \")[0];\r\n        if (newExceptions.has(exception))\r\n          newExceptions.set(exception, newExceptions.get(exception)! + 1);\r\n        else newExceptions.set(exception, 1);\r\n      }\r\n\r\n      let worker = (log.Properties?.WorkerName ?? \"General\") + \" \" + log.Level;\r\n      if (newWorkers.has(worker))\r\n        newWorkers.set(worker, newWorkers.get(worker)! + 1);\r\n      else newWorkers.set(worker, 1);\r\n\r\n      let applicationSessionId = log.Properties?.ApplicationSessionId ?? \"\";\r\n      if (newApplicationSessionIds.has(applicationSessionId))\r\n        newApplicationSessionIds.set(\r\n          applicationSessionId,\r\n          newApplicationSessionIds.get(applicationSessionId)! + 1\r\n        );\r\n      else newApplicationSessionIds.set(applicationSessionId, 1);\r\n    }\r\n\r\n    setExceptions(newExceptions);\r\n    setFilterExceptionsStaging(Array.from(newExceptions.keys()));\r\n\r\n    setFilterExceptionsRegexStaging(\"\");\r\n\r\n    setWorkers(newWorkers);\r\n    setFilterWorkersStaging(Array.from(newWorkers.keys()));\r\n\r\n    setApplicationSessionIds(newApplicationSessionIds);\r\n    setFilterApplicationSessionIdsStaging(\r\n      Array.from(newApplicationSessionIds.keys())\r\n    );\r\n\r\n    var newApplicationSessionIdTimestamps = Array.from(\r\n      newApplicationSessionIds.keys()\r\n    ).reduce(function (map: Map<string, Date>, sessionId: string) {\r\n      map.set(\r\n        sessionId,\r\n        objects\r\n          .filter((line) => line.Properties?.ApplicationSessionId === sessionId)\r\n          .reduce(function (date: Date, line: LogLine) {\r\n            return line.Timestamp < date ? line.Timestamp : date;\r\n          }, new Date(9999, 12, 31))\r\n      );\r\n\r\n      return map;\r\n    }, new Map<string, Date>());\r\n\r\n    setApplicationSessionIdTimestamps(newApplicationSessionIdTimestamps);\r\n\r\n    if (objects.length > 0) {\r\n      setFilterStartDate(objects[0].Timestamp);\r\n      setFilterEndDate(objects[objects.length - 1].Timestamp);\r\n    }\r\n    applyFilters();\r\n\r\n    setLogLines(objects);\r\n  }, [fileLines, loading]);\r\n\r\n  useEffect(() => {\r\n    setViewLogLines(\r\n      logLines.filter(\r\n        (l) =>\r\n          (!l.Exception ||\r\n            filterExceptions.includes(l.Exception.split(\" \")[0])) &&\r\n          filterWorkers.includes(\r\n            (l.Properties?.WorkerName ?? \"General\") + \" \" + l.Level\r\n          ) &&\r\n          (filterExceptionsRegex.length === 0 ||\r\n            l.Exception.match(filterExceptionsRegex)) &&\r\n          filterApplicationSessionIds.includes(\r\n            l.Properties?.ApplicationSessionId ?? \"\"\r\n          ) &&\r\n          filterStartDate !== new Date(0) &&\r\n          l.Timestamp >= filterStartDate &&\r\n          filterEndDate !== new Date(0) &&\r\n          l.Timestamp <= filterEndDate\r\n      )\r\n    );\r\n  }, [\r\n    logLines,\r\n    filterExceptions,\r\n    filterExceptionsRegex,\r\n    filterWorkers,\r\n    filterApplicationSessionIds,\r\n    filterStartDate,\r\n    filterEndDate,\r\n  ]);\r\n\r\n  const loadFile = (file: File) => {\r\n    setFileLines([]);\r\n    const chunkSize = 1024 * 1024 * 100;\r\n    const totalChunks = file.size / chunkSize + 1;\r\n    let currentChunk = 0;\r\n    setCurrentFile(file.name);\r\n    setLoadingProgress(0);\r\n    setLoadingTotal(totalChunks);\r\n    setLoading(true);\r\n    const reader = new FileReader();\r\n    reader.addEventListener(\"error\", (event) => {\r\n      console.error(\"Can not load file\", event);\r\n      setLoading(false);\r\n      setFileLines([]);\r\n      setCurrentPage(0);\r\n      setCurrentFile(\"\");\r\n      applyFilters();\r\n    });\r\n    reader.addEventListener(\"load\", (event) => {\r\n      const lines = (event.target?.result as string).split(\"\\n\");\r\n      setFileLines((l) => [...l, ...lines]);\r\n      currentChunk++;\r\n      console.log(currentChunk, totalChunks);\r\n      if (currentChunk > totalChunks) {\r\n        setLoading(false);\r\n        setCurrentPage(0);\r\n      } else {\r\n        setLoadingProgress(currentChunk);\r\n        reader.readAsText(\r\n          file.slice(\r\n            currentChunk * chunkSize,\r\n            Math.min(currentChunk * chunkSize + chunkSize, file.size)\r\n          )\r\n        );\r\n      }\r\n    });\r\n\r\n    reader.readAsText(file.slice(0, Math.min(file.size, chunkSize)));\r\n  };\r\n\r\n  const applyFilters = () => {\r\n    setFilterExceptions([...filterExceptionsStaging]);\r\n    setFilterExceptionsRegex(filterExceptionsRegexStaging);\r\n    setFilterWorkers([...filterWorkersStaging]);\r\n    setFilterApplicationSessionIds([...filterApplicationSessionIdsStaging]);\r\n    setFilterModified(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"0px\",\r\n          top: \"0px\",\r\n          color: \"lightgray\",\r\n        }}\r\n      >\r\n        v{versionNumber}\r\n      </div>\r\n      <Alert color=\"success\" className=\"alert\" isOpen={showingClipBoardAlert}>\r\n          Log line was copied to clipboard.\r\n      </Alert>\r\n      <div>\r\n        <div {...getRootProps()} className=\"dropzone\">\r\n          <input\r\n            type=\"file\"\r\n            ref={fileInput}\r\n            disabled={loading}\r\n            accept=\".json\"\r\n            {...getInputProps()}\r\n          />\r\n          {isDragActive\r\n            ? \"Drop file here\"\r\n            : \"Click or drag and drop files here\"}\r\n        </div>\r\n        <div>{currentFile}</div>\r\n      </div>\r\n      {loading ? (\r\n        <div style={{ width: \"70%\" }}>\r\n          <Spinner color=\"info\" />\r\n          <Progress\r\n            value={(loadingProgress / loadingTotal) * 100}\r\n            max={100}\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            {Math.round((loadingProgress / loadingTotal) * 100)}%\r\n          </Progress>\r\n        </div>\r\n      ) : (\r\n        <div style={{ width: \"100%\" }}>\r\n          <Graph LogLines={viewLogLines} Workers={filterWorkers} />\r\n          <div className=\"accordion\" id=\"settingsAccordion\">\r\n            <Button onClick={() => applyFilters()} disabled={!filterModified}>\r\n              Apply settings\r\n            </Button>\r\n            <div className=\"card\">\r\n              <div className=\"card-header\" id=\"exceptionsHeading\">\r\n                <h2 className=\"mb-0\">\r\n                  <button\r\n                    className=\"btn btn-link collapsed\"\r\n                    type=\"button\"\r\n                    data-toggle=\"collapse\"\r\n                    data-target=\"#exceptionsCollapse\"\r\n                    aria-expanded=\"true\"\r\n                    aria-controls=\"exceptionsCollapse\"\r\n                  >\r\n                    Exceptions\r\n                  </button>\r\n                </h2>\r\n              </div>\r\n\r\n              <div\r\n                id=\"exceptionsCollapse\"\r\n                className=\"collapse\"\r\n                aria-labelledby=\"exceptionsHeading\"\r\n                data-parent=\"#settingsAccordion\"\r\n              >\r\n                <div className=\"card-body\">\r\n                  <div>\r\n                    <Label>Regex: </Label>\r\n                    <Input\r\n                      onChange={(e) =>\r\n                        setFilterExceptionsRegexStaging(e.target.value)\r\n                      }\r\n                      value={filterExceptionsRegexStaging}\r\n                    />{\" \"}\r\n                  </div>\r\n                  <Table striped bordered>\r\n                    <thead>\r\n                      <tr>\r\n                        <td width=\"10%\">Count</td>\r\n                        <td width=\"auto\">Exception</td>\r\n                        <td width=\"5%\">\r\n                          <div\r\n                            style={{ display: \"flex\", flexDirection: \"row\" }}\r\n                          >\r\n                            <Button\r\n                              outline\r\n                              size=\"sm\"\r\n                              color=\"secondary\"\r\n                              style={{ marginRight: 5 }}\r\n                              onClick={() => setFilterExceptionsStaging([])}\r\n                            >\r\n                              ☐\r\n                            </Button>\r\n                            <Button\r\n                              outline\r\n                              size=\"sm\"\r\n                              color=\"success\"\r\n                              onClick={() =>\r\n                                setFilterExceptionsStaging(\r\n                                  Array.from(exceptions.keys())\r\n                                )\r\n                              }\r\n                            >\r\n                              ☑\r\n                            </Button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {Array.from(exceptions.keys())\r\n                        .sort()\r\n                        .map((k) => (\r\n                          <tr key={k}>\r\n                            <td>{exceptions.get(k)}</td>\r\n                            <td>{k}</td>\r\n                            <td>\r\n                              <Input\r\n                                type=\"checkbox\"\r\n                                className=\"tableCheckbox\"\r\n                                checked={filterExceptionsStaging.includes(k)}\r\n                                onChange={(e) => {\r\n                                  if (e.target.checked)\r\n                                    setFilterExceptionsStaging([\r\n                                      ...filterExceptionsStaging,\r\n                                      k,\r\n                                    ]);\r\n                                  else\r\n                                    setFilterExceptionsStaging([\r\n                                      ...filterExceptionsStaging.filter(\r\n                                        (s) => s !== k\r\n                                      ),\r\n                                    ]);\r\n                                }}\r\n                              />\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                    </tbody>\r\n                  </Table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"card\">\r\n              <div className=\"card-header\" id=\"workersHeading\">\r\n                <h2 className=\"mb-0\">\r\n                  <button\r\n                    className=\"btn btn-link collapsed\"\r\n                    type=\"button\"\r\n                    data-toggle=\"collapse\"\r\n                    data-target=\"#workersCollapse\"\r\n                    aria-expanded=\"true\"\r\n                    aria-controls=\"workersCollapse\"\r\n                  >\r\n                    Workers\r\n                  </button>\r\n                </h2>\r\n              </div>\r\n\r\n              <div\r\n                id=\"workersCollapse\"\r\n                className=\"collapse\"\r\n                aria-labelledby=\"workersHeading\"\r\n                data-parent=\"#settingsAccordion\"\r\n              >\r\n                <div className=\"card-body\">\r\n                  <Table striped bordered>\r\n                    <thead>\r\n                      <tr>\r\n                        <td width=\"10%\">Count</td>\r\n                        <td width=\"auto\">Worker</td>\r\n                        <td width=\"5%\">\r\n                          <div\r\n                            style={{ display: \"flex\", flexDirection: \"row\" }}\r\n                          >\r\n                            <Button\r\n                              outline\r\n                              size=\"sm\"\r\n                              color=\"secondary\"\r\n                              style={{ marginRight: 5 }}\r\n                              onClick={() => setFilterWorkersStaging([])}\r\n                            >\r\n                              ☐\r\n                            </Button>\r\n                            <Button\r\n                              outline\r\n                              size=\"sm\"\r\n                              color=\"success\"\r\n                              onClick={() =>\r\n                                setFilterWorkersStaging(\r\n                                  Array.from(workers.keys())\r\n                                )\r\n                              }\r\n                            >\r\n                              ☑\r\n                            </Button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {Array.from(workers.keys())\r\n                        .sort()\r\n                        .map((k) => (\r\n                          <tr key={k}>\r\n                            <td>{workers.get(k)}</td>\r\n                            <td>{k}</td>\r\n                            <td>\r\n                              <div>\r\n                                <Input\r\n                                  type=\"checkbox\"\r\n                                  className=\"tableCheckbox\"\r\n                                  checked={filterWorkersStaging.includes(k)}\r\n                                  onChange={(e) => {\r\n                                    if (e.target.checked)\r\n                                      setFilterWorkersStaging([\r\n                                        ...filterWorkersStaging,\r\n                                        k,\r\n                                      ]);\r\n                                    else\r\n                                      setFilterWorkersStaging([\r\n                                        ...filterWorkersStaging.filter(\r\n                                          (s) => s !== k\r\n                                        ),\r\n                                      ]);\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                    </tbody>\r\n                  </Table>\r\n                </div>\r\n              </div>\r\n              <div className=\"card\">\r\n                <div className=\"card-header\" id=\"exceptionsHeading\">\r\n                  <h2 className=\"mb-0\">\r\n                    <button\r\n                      className=\"btn btn-link collapsed\"\r\n                      type=\"button\"\r\n                      data-toggle=\"collapse\"\r\n                      data-target=\"#applicationSessionIdsCollapse\"\r\n                      aria-expanded=\"true\"\r\n                      aria-controls=\"applicationSessionIdsCollapse\"\r\n                    >\r\n                      Application Session Ids\r\n                    </button>\r\n                  </h2>\r\n                </div>\r\n\r\n                <div\r\n                  id=\"applicationSessionIdsCollapse\"\r\n                  className=\"collapse\"\r\n                  aria-labelledby=\"applicationSessionIdsHeading\"\r\n                  data-parent=\"#settingsAccordion\"\r\n                >\r\n                  <div className=\"card-body\">\r\n                    <Table striped bordered>\r\n                      <thead>\r\n                        <tr>\r\n                          <td width=\"10%\">Count</td>\r\n                          <td width=\"auto\">Application Session Id</td>\r\n                          <td width=\"auto\">Start time</td>\r\n                          <td width=\"5%\">\r\n                            <div\r\n                              style={{ display: \"flex\", flexDirection: \"row\" }}\r\n                            >\r\n                              <Button\r\n                                outline\r\n                                size=\"sm\"\r\n                                color=\"secondary\"\r\n                                style={{ marginRight: 5 }}\r\n                                onClick={() =>\r\n                                  setFilterApplicationSessionIdsStaging([])\r\n                                }\r\n                              >\r\n                                ☐\r\n                              </Button>\r\n                              <Button\r\n                                outline\r\n                                size=\"sm\"\r\n                                color=\"success\"\r\n                                onClick={() =>\r\n                                  setFilterApplicationSessionIdsStaging(\r\n                                    Array.from(applicationSessionIds.keys())\r\n                                  )\r\n                                }\r\n                              >\r\n                                ☑\r\n                              </Button>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {Array.from(applicationSessionIds.keys())\r\n                          .sort((a, b) =>\r\n                            applicationSessionIdTimestamps.get(a)! >\r\n                            applicationSessionIdTimestamps.get(b)!\r\n                              ? -1\r\n                              : 1\r\n                          )\r\n                          .map((k) => (\r\n                            <tr key={k}>\r\n                              <td>{applicationSessionIds.get(k)}</td>\r\n                              <td>{k}</td>\r\n                              <td>\r\n                                {applicationSessionIdTimestamps\r\n                                  .get(k)\r\n                                  ?.toString()}\r\n                              </td>\r\n                              <td>\r\n                                <Input\r\n                                  type=\"checkbox\"\r\n                                  className=\"tableCheckbox\"\r\n                                  checked={filterApplicationSessionIdsStaging.includes(\r\n                                    k\r\n                                  )}\r\n                                  onChange={(e) => {\r\n                                    if (e.target.checked)\r\n                                      setFilterApplicationSessionIdsStaging([\r\n                                        ...filterApplicationSessionIdsStaging,\r\n                                        k,\r\n                                      ]);\r\n                                    else\r\n                                      setFilterApplicationSessionIdsStaging([\r\n                                        ...filterApplicationSessionIdsStaging.filter(\r\n                                          (s) => s !== k\r\n                                        ),\r\n                                      ]);\r\n                                  }}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                          ))}\r\n                      </tbody>\r\n                    </Table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          Events:\r\n          <br />\r\n          {\"Start Time: \"}\r\n          <DatePicker\r\n            selected={\r\n              filterStartDate ??\r\n              (logLines.length > 0 ? logLines[0].Timestamp : new Date())\r\n            }\r\n            onChange={(date) => {\r\n              if (date instanceof Date) setFilterStartDate(date);\r\n            }}\r\n            showTimeSelect\r\n            timeFormat=\"HH:mm\"\r\n            dateFormat=\"dd.MM.yyyy HH:mm\"\r\n          />\r\n          <Button onClick={() => setFilterStartDate(logLines[0].Timestamp)}>\r\n            Clear\r\n          </Button>\r\n          <br />\r\n          {\"End Time: \"}\r\n          <DatePicker\r\n            selected={\r\n              filterEndDate ??\r\n              (logLines.length > 0\r\n                ? logLines[logLines.length - 1].Timestamp\r\n                : new Date())\r\n            }\r\n            onChange={(date) => {\r\n              if (date instanceof Date) setFilterEndDate(date);\r\n            }}\r\n            showTimeSelect\r\n            timeFormat=\"HH:mm\"\r\n            dateFormat=\"dd.MM.yyyy HH:mm\"\r\n          />\r\n          <Button\r\n            onClick={() =>\r\n              setFilterEndDate(logLines[logLines.length - 1].Timestamp)\r\n            }\r\n          >\r\n            Clear\r\n          </Button>\r\n          <br />\r\n          Filtered {viewLogLines.length} out of {logLines.length}\r\n          <br />\r\n          Showing {currentPage * 1000} ...{\" \"}\r\n          {Math.min(viewLogLines.length - currentPage * 1000, 1000) +\r\n            currentPage * 1000}\r\n          <ReactPaginate\r\n            pageCount={viewLogLines.length / 1000}\r\n            onPageChange={(s) => {\r\n              setCurrentPage(s.selected);\r\n            }}\r\n            forcePage={currentPage}\r\n            disableInitialCallback={true}\r\n            pageRangeDisplayed={3}\r\n            marginPagesDisplayed={1}\r\n            breakClassName={\"page-item\"}\r\n            breakLinkClassName={\"page-link\"}\r\n            containerClassName={\"pagination\"}\r\n            pageClassName={\"page-item\"}\r\n            pageLinkClassName={\"page-link\"}\r\n            previousClassName={\"page-item\"}\r\n            previousLinkClassName={\"page-link\"}\r\n            nextClassName={\"page-item\"}\r\n            nextLinkClassName={\"page-link\"}\r\n            activeClassName={\"active\"}\r\n          />\r\n          <Table striped id=\"mainTable\">\r\n            <thead>\r\n              <tr>\r\n                <td width=\"5%\">#</td>\r\n                <td width=\"10%\">Time</td>\r\n                <td width=\"10%\">Level</td>\r\n                <td width=\"10%\">Work Item</td>\r\n                <td width=\"20%\">Message</td>\r\n                <td width=\"auto\">Exception</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {viewLogLines\r\n                .filter(\r\n                  (_, i) =>\r\n                    i >= currentPage * 1000 && i < (currentPage + 1) * 1000\r\n                )\r\n                .map((l) => (\r\n                  <tr key={l.Id} className={\"logRow \" + l.Level}>\r\n                    <td>\r\n                      <p style={{ wordWrap: \"break-word\" }}>{l.Id}</p>\r\n                      <div>\r\n                        <Button\r\n                          onClick={() => {\r\n                            navigator.clipboard.writeText(l.RawLine);\r\n                            setShowingClipBoardAlert(true);\r\n                            setTimeout(() => {\r\n                              setShowingClipBoardAlert(false);\r\n                            }, 1500);\r\n                          }}\r\n                        >\r\n                          Copy\r\n                        </Button>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <p style={{ wordWrap: \"break-word\" }}>\r\n                        {l.Timestamp.toLocaleString()}\r\n                      </p>\r\n                    </td>\r\n                    <td>\r\n                      <div>\r\n                        <p style={{ wordWrap: \"break-word\" }}>{l.Level}</p>\r\n                        <p style={{ wordWrap: \"break-word\" }}>\r\n                          {l.Properties?.MetricName}\r\n                        </p>\r\n                        <p style={{ wordWrap: \"break-word\" }}>\r\n                          {l.Properties?.ConcurrentTaskIndex}\r\n                        </p>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <p style={{ wordWrap: \"break-word\" }}>\r\n                        {l.Properties?.WorkItemKey ?? \"*\"}\r\n                      </p>\r\n                    </td>\r\n                    <td>\r\n                      <p style={{ wordWrap: \"break-word\" }}>{l.Message}</p>\r\n                    </td>\r\n                    <td>\r\n                      <p\r\n                        style={{\r\n                          wordWrap: \"break-word\",\r\n                          whiteSpace: \"break-spaces\",\r\n                        }}\r\n                      >\r\n                        {l.Exception}\r\n                      </p>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n          <ReactPaginate\r\n            pageCount={viewLogLines.length / 1000}\r\n            onPageChange={(s) => {\r\n              setCurrentPage(s.selected);\r\n              document.getElementById(\"mainTable\")?.scrollIntoView();\r\n            }}\r\n            forcePage={currentPage}\r\n            disableInitialCallback={true}\r\n            pageRangeDisplayed={3}\r\n            marginPagesDisplayed={1}\r\n            breakClassName={\"page-item\"}\r\n            breakLinkClassName={\"page-link\"}\r\n            containerClassName={\"pagination\"}\r\n            pageClassName={\"page-item\"}\r\n            pageLinkClassName={\"page-link\"}\r\n            previousClassName={\"page-item\"}\r\n            previousLinkClassName={\"page-link\"}\r\n            nextClassName={\"page-item\"}\r\n            nextLinkClassName={\"page-link\"}\r\n            activeClassName={\"active\"}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { App, LogLine };\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}