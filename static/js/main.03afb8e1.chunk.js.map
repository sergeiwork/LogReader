{"version":3,"sources":["components/Graph.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["GraphPoint","Time","Timestamp","CreateGraphPoint","timeStamp","time","lines","result","forEach","line","Graph","props","useState","graphData","setGraphData","useEffect","newGraph","Array","newPoint","LogLines","log","worker","Properties","WorkerName","Level","getHours","Math","floor","getMinutes","padStart","push","getTime","Workers","current","isNaN","data","height","width","strokeDasharray","dataKey","map","w","type","stroke","random","toString","format","str","obj","Object","keys","key","replace","RegExp","App","fileInput","createRef","fileLines","setFileLines","logLines","setLogLines","Map","exceptions","setExceptions","workers","setworkers","loading","setLoading","filterExceptions","setFilterExceptions","filterWorkers","setFilterWorkers","viewLogLines","setViewLogLines","objects","filter","l","trim","length","i","JSON","parse","Date","Message","MessageTemplate","Exception","Id","newExceptions","newWorkers","exception","split","has","set","get","from","includes","className","ref","disabled","accept","Button","onClick","event","reader","FileReader","addEventListener","target","readAsText","files","Spinner","color","style","Table","striped","bordered","display","flexDirection","outline","size","marginRight","sort","k","Input","checked","onChange","e","s","toLocaleString","WorkItemKey","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03afb8e1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Legend,\r\n  Line,\r\n  Tooltip,\r\n} from \"recharts\";\r\nimport { LogLine } from \"../App\";\r\n\r\nclass GraphPoint {\r\n  public Time: string = \"00\";\r\n  public Timestamp: number = 0;\r\n  [key: string]: number | string;\r\n}\r\n\r\nfunction CreateGraphPoint(\r\n  timeStamp: number,\r\n  time: string,\r\n  lines: string[]\r\n): GraphPoint {\r\n  let result = new GraphPoint();\r\n  result.Timestamp = timeStamp;\r\n  result.Time = time;\r\n  lines.forEach((line) => {\r\n    result[line] = 0;\r\n  });\r\n  return result;\r\n}\r\n\r\nclass GraphProps {\r\n  LogLines: LogLine[] = [];\r\n  Workers: string[] = [];\r\n}\r\n\r\nfunction Graph(props: GraphProps) {\r\n  const [graphData, setGraphData] = useState<GraphPoint[]>([]);\r\n\r\n  useEffect(() => {\r\n    const newGraph = new Array<GraphPoint>();\r\n    let newPoint = new GraphPoint();\r\n    for (let log of props.LogLines) {\r\n      let worker = (log.Properties?.WorkerName ?? \"General\") + \" \" + log.Level;\r\n      let time =\r\n        log.Timestamp.getHours() +\r\n        \":\" +\r\n        (Math.floor(log.Timestamp.getMinutes() / 10) * 10 + \"\").padStart(\r\n          2,\r\n          \"0\"\r\n        );\r\n      if (time !== newPoint.Time) {\r\n        if (newPoint.Time !== \"\") {\r\n          newGraph.push(newPoint);\r\n        }\r\n        newPoint = CreateGraphPoint(\r\n          log.Timestamp.getTime(),\r\n          time,\r\n          props.Workers\r\n        );\r\n      }\r\n      let current = newPoint[worker] as number;\r\n      newPoint[worker] = (isNaN(current) ? 0 : current) + 1;\r\n    }\r\n    setGraphData(newGraph);\r\n  }, [props.LogLines, props.Workers]);\r\n\r\n  return (\r\n    <LineChart data={graphData} height={300} width={1000}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"Time\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      {props.Workers.map((w) => (\r\n        <Line\r\n          type=\"monotone\"\r\n          dataKey={w}\r\n          stroke={\"#\" + Math.floor(Math.random() * 16777215).toString(16)}\r\n          key={w}\r\n        />\r\n      ))}\r\n    </LineChart>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","import React, { createRef, useEffect, useState } from \"react\";\r\nimport { Button, Input, Spinner, Table } from \"reactstrap\";\r\nimport \"./App.css\";\r\nimport Graph from \"./components/Graph\";\r\n\r\ninterface ILogLineProperties {\r\n  SourceContext: string;\r\n  ElapsedMilliseconds: number;\r\n  MetricName: string;\r\n  WorkItemKey: string;\r\n  ConcurrentTaskIndex: number;\r\n  WorkerSessionId: string;\r\n  WorkerName: string;\r\n  AssemblyName: string;\r\n  AssemblyVersion: string;\r\n  MachineName: string;\r\n  EnvironmentUserName: string;\r\n  ApplicationSessionId: string;\r\n}\r\n\r\nclass LogLine {\r\n  Timestamp: Date = new Date();\r\n  Level: string = \"\";\r\n  Message: string = \"\";\r\n  Exception: string = \"\";\r\n  Id: number = 0;\r\n  Properties: ILogLineProperties | null = null;\r\n}\r\n\r\nconst format = (str: string, obj: any): string => {\r\n  Object.keys(obj).forEach((key) => {\r\n    str = str.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"gi\"), obj[key]);\r\n  });\r\n\r\n  return str;\r\n};\r\n\r\nfunction App() {\r\n  const fileInput = createRef<HTMLInputElement>();\r\n  const [fileLines, setFileLines] = useState<string[]>([]);\r\n  const [logLines, setLogLines] = useState<LogLine[]>([]);\r\n\r\n  const [exceptions, setExceptions] = useState(new Map<string, number>());\r\n  const [workers, setworkers] = useState(new Map<string, number>());\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [filterExceptions, setFilterExceptions] = useState<string[]>([]);\r\n  const [filterWorkers, setFilterWorkers] = useState<string[]>([]);\r\n\r\n  const [viewLogLines, setViewLogLines] = useState<LogLine[]>([]);\r\n\r\n  useEffect(() => {\r\n    var objects = fileLines\r\n      .filter((l) => l.trim().length > 0)\r\n      .map<LogLine | null>((l, i) => {\r\n        try{\r\n          const obj = JSON.parse(l);\r\n          return {\r\n            Timestamp: new Date(obj.Timestamp),\r\n            Level: obj.Level,\r\n            Message: format(obj.MessageTemplate, obj.Properties),\r\n            Exception: obj.Exception,\r\n            Id: i,\r\n            Properties: obj.Properties,\r\n          };\r\n        } catch {\r\n          return null;\r\n        }\r\n      })\r\n      .filter((l) => l !== null)\r\n      .map<LogLine>(l => l!);\r\n\r\n    const newExceptions = new Map<string, number>();\r\n    const newWorkers = new Map<string, number>();\r\n\r\n    for (let log of objects) {\r\n      if (log.Exception) {\r\n        let exception = log.Exception.split(\" \")[0];\r\n        if (newExceptions.has(exception))\r\n          newExceptions.set(exception, newExceptions.get(exception)! + 1);\r\n        else newExceptions.set(exception, 1);\r\n      }\r\n\r\n      let worker = (log.Properties?.WorkerName ?? \"General\") + \" \" + log.Level;\r\n      if (newWorkers.has(worker))\r\n        newWorkers.set(worker, newWorkers.get(worker)! + 1);\r\n      else newWorkers.set(worker, 1);\r\n    }\r\n\r\n    setExceptions(newExceptions);\r\n    setFilterExceptions(Array.from(newExceptions.keys()));\r\n\r\n    setworkers(newWorkers);\r\n    setFilterWorkers(Array.from(newWorkers.keys()));\r\n\r\n    setLogLines(objects);\r\n  }, [fileLines]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setViewLogLines(\r\n      logLines.filter(\r\n        (l) =>\r\n          (!l.Exception ||\r\n            filterExceptions.includes(l.Exception.split(\" \")[0])) &&\r\n          filterWorkers.includes(\r\n            (l.Properties?.WorkerName ?? \"General\") + \" \" + l.Level\r\n          )\r\n      )\r\n    );\r\n    setLoading(false);\r\n  }, [logLines, filterExceptions, filterWorkers]);\r\n\r\n  const loadFile = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener(\"load\", (event) => {\r\n      const lines = (event.target?.result as string).split(\"\\n\");\r\n      setFileLines(lines);\r\n      setLoading(false);\r\n    });\r\n    setLoading(true);\r\n    reader.readAsText(fileInput.current!.files![0]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <input type=\"file\" ref={fileInput} disabled={loading} accept=\".json\" />\r\n      <Button onClick={loadFile} disabled={loading}>\r\n        Load\r\n      </Button>\r\n      {loading ? (\r\n        <Spinner color=\"info\" />\r\n      ) : (\r\n        <div style={{ width: \"100%\" }}>\r\n          <Graph LogLines={viewLogLines} Workers={filterWorkers} />\r\n          Exceptions:\r\n          <Table striped bordered>\r\n            <thead>\r\n              <tr>\r\n                <td width=\"10%\">Count</td>\r\n                <td width=\"auto\">Exception</td>\r\n                <td width=\"5%\">\r\n                  <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                    <Button\r\n                      outline\r\n                      size=\"sm\"\r\n                      color=\"secondary\"\r\n                      style={{ marginRight: 5 }}\r\n                      onClick={() => setFilterExceptions([])}\r\n                    >\r\n                      ☐\r\n                    </Button>\r\n                    <Button\r\n                      outline\r\n                      size=\"sm\"\r\n                      color=\"success\"\r\n                      onClick={() =>\r\n                        setFilterExceptions(Array.from(exceptions.keys()))\r\n                      }\r\n                    >\r\n                      ☑\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Array.from(exceptions.keys())\r\n                .sort()\r\n                .map((k) => (\r\n                  <tr key={k}>\r\n                    <td>{exceptions.get(k)}</td>\r\n                    <td>{k}</td>\r\n                    <td>\r\n                      <Input\r\n                        type=\"checkbox\"\r\n                        className=\"tableCheckbox\"\r\n                        checked={filterExceptions.includes(k)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked)\r\n                            setFilterExceptions([...filterExceptions, k]);\r\n                          else\r\n                            setFilterExceptions([\r\n                              ...filterExceptions.filter((s) => s !== k),\r\n                            ]);\r\n                        }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n          <br />\r\n          Workers:\r\n          <Table striped bordered>\r\n            <thead>\r\n              <tr>\r\n                <td width=\"10%\">Count</td>\r\n                <td width=\"auto\">Worker</td>\r\n                <td width=\"5%\">\r\n                  <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                    <Button\r\n                      outline\r\n                      size=\"sm\"\r\n                      color=\"secondary\"\r\n                      style={{ marginRight: 5 }}\r\n                      onClick={() => setFilterWorkers([])}\r\n                    >\r\n                      ☐\r\n                    </Button>\r\n                    <Button\r\n                      outline\r\n                      size=\"sm\"\r\n                      color=\"success\"\r\n                      onClick={() =>\r\n                        setFilterWorkers(Array.from(workers.keys()))\r\n                      }\r\n                    >\r\n                      ☑\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Array.from(workers.keys())\r\n                .sort()\r\n                .map((k) => (\r\n                  <tr key={k}>\r\n                    <td>{workers.get(k)}</td>\r\n                    <td>{k}</td>\r\n                    <td>\r\n                      <div>\r\n                        <Input\r\n                          type=\"checkbox\"\r\n                          className=\"tableCheckbox\"\r\n                          checked={filterWorkers.includes(k)}\r\n                          onChange={(e) => {\r\n                            if (e.target.checked)\r\n                              setFilterWorkers([...filterWorkers, k]);\r\n                            else\r\n                              setFilterWorkers([\r\n                                ...filterWorkers.filter((s) => s !== k),\r\n                              ]);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n          <br />\r\n          Events:\r\n          <br />\r\n          Showing {viewLogLines.length} out of {logLines.length}\r\n          <Table striped>\r\n            <thead>\r\n              <tr>\r\n                <td width=\"5%\">#</td>\r\n                <td width=\"10%\">Time</td>\r\n                <td width=\"10%\">Level</td>\r\n                <td width=\"10%\">Work Item</td>\r\n                <td width=\"20%\">Message</td>\r\n                <td width=\"auto\">Exception</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {viewLogLines.filter((l, i) => i <= 1000).map((l) => (\r\n                <tr key={l.Id} className={\"logRow \" + l.Level}>\r\n                  <td>{l.Id}</td>\r\n                  <td>{l.Timestamp.toLocaleString()}</td>\r\n                  <td>{l.Level}</td>\r\n                  <td>{l.Properties?.WorkItemKey ?? \"*\"}</td>\r\n                  <td>{l.Message}</td>\r\n                  <td>{l.Exception}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { App, LogLine };\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}