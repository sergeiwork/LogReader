{"version":3,"sources":["components/Graph.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["GraphPoint","Time","Timestamp","CreateGraphPoint","timeStamp","time","lines","result","forEach","line","Graph","props","useState","graphData","setGraphData","useEffect","newGraph","Array","newPoint","LogLines","log","worker","Properties","WorkerName","Level","getHours","Math","floor","getMinutes","padStart","push","getTime","Workers","current","isNaN","includes","width","height","data","style","zIndex","strokeDasharray","dataKey","map","w","type","stroke","random","toString","format","str","obj","Object","keys","key","replace","RegExp","App","fileInput","createRef","fileLines","setFileLines","logLines","setLogLines","Map","exceptions","setExceptions","workers","setWorkers","applicationSessionIds","setApplicationSessionIds","applicationSessionIdTimestamps","setApplicationSessionIdTimestamps","loading","setLoading","showingClipBoardAlert","setShowingClipBoardAlert","filterExceptions","setFilterExceptions","filterExceptionsRegex","setFilterExceptionsRegex","filterWorkers","setFilterWorkers","filterApplicationSessionIds","setFilterApplicationSessionIds","Date","filterStartDate","setFilterStartDate","filterEndDate","setFilterEndDate","filterExceptionsStaging","setFilterExceptionsStaging","filterExceptionsRegexStaging","setFilterExceptionsRegexStaging","filterWorkersStaging","setFilterWorkersStaging","filterApplicationSessionIdsStaging","setFilterApplicationSessionIdsStaging","filterModified","setFilterModified","viewLogLines","setViewLogLines","currentPage","setCurrentPage","loadingProgress","setLoadingProgress","loadingTotal","setLoadingTotal","currentFile","setCurrentFile","onDrop","useCallback","files","length","loadFile","useDropzone","getRootProps","getInputProps","isDragActive","objects","filter","l","trim","i","JSON","parse","Message","MessageTemplate","Exception","Id","RawLine","newExceptions","newWorkers","newApplicationSessionIds","exception","split","has","set","get","applicationSessionId","ApplicationSessionId","from","newApplicationSessionIdTimestamps","reduce","sessionId","date","applyFilters","match","file","chunkSize","totalChunks","size","currentChunk","name","reader","FileReader","addEventListener","event","console","error","target","readAsText","slice","min","className","position","left","top","color","Alert","isOpen","ref","disabled","accept","value","id","onClick","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","Label","Input","onChange","e","columns","field","headerName","rows","sort","k","Count","checkboxSelection","onSelectionModelChange","Worker","striped","bordered","display","flexDirection","outline","marginRight","a","b","checked","s","selected","showTimeSelect","timeFormat","dateFormat","pageCount","onPageChange","forcePage","disableInitialCallback","pageRangeDisplayed","marginPagesDisplayed","breakClassName","breakLinkClassName","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","activeClassName","_","wordWrap","navigator","clipboard","writeText","setTimeout","toLocaleString","MetricName","ConcurrentTaskIndex","WorkItemKey","whiteSpace","document","getElementById","scrollIntoView","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.32cdf23e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Legend,\r\n  Line,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { LogLine } from \"../App\";\r\n\r\nclass GraphPoint {\r\n  public Time: string = \"00\";\r\n  public Timestamp: number = 0;\r\n  [key: string]: number | string;\r\n}\r\n\r\nfunction CreateGraphPoint(\r\n  timeStamp: number,\r\n  time: string,\r\n  lines: string[]\r\n): GraphPoint {\r\n  let result = new GraphPoint();\r\n  result.Timestamp = timeStamp;\r\n  result.Time = time;\r\n  lines.forEach((line) => {\r\n    result[line] = 0;\r\n  });\r\n  return result;\r\n}\r\n\r\nclass GraphProps {\r\n  LogLines: LogLine[] = [];\r\n  Workers: string[] = [];\r\n}\r\n\r\nfunction Graph(props: GraphProps) {\r\n  const [graphData, setGraphData] = useState<GraphPoint[]>([]);\r\n\r\n  useEffect(() => {\r\n    const newGraph = new Array<GraphPoint>();\r\n    let newPoint = new GraphPoint();\r\n    for (let log of props.LogLines) {\r\n      let worker = (log.Properties?.WorkerName ?? \"General\") + \" \" + log.Level;\r\n      let time =\r\n        log.Timestamp.getHours() +\r\n        \":\" +\r\n        (Math.floor(log.Timestamp.getMinutes() / 10) * 10 + \"\").padStart(\r\n          2,\r\n          \"0\"\r\n        );\r\n      if (time !== newPoint.Time) {\r\n        if (newPoint.Time !== \"\") {\r\n          newGraph.push(newPoint);\r\n        }\r\n        newPoint = CreateGraphPoint(\r\n          log.Timestamp.getTime(),\r\n          time,\r\n          props.Workers\r\n        );\r\n      }\r\n      let current = newPoint[worker] as number;\r\n      newPoint[worker] = (isNaN(current) ? 0 : current) + 1;\r\n    }\r\n    if (!newGraph.includes(newPoint)) newGraph.push(newPoint);\r\n    setGraphData(newGraph);\r\n  }, [props.LogLines, props.Workers]);\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={400}>\r\n      <LineChart\r\n        data={graphData}\r\n        height={300}\r\n        width={1000}\r\n        style={{ zIndex: 100 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"Time\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        {props.Workers.map((w) => (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey={w}\r\n            stroke={\"#\" + Math.floor(Math.random() * 16777215).toString(16)}\r\n            key={w}\r\n          />\r\n        ))}\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","import React, {\n  createRef,\n  useCallback,\n  useEffect,\n  useState\n} from \"react\";\nimport { Alert, Input, Label } from \"reactstrap\";\nimport { Table as ReactStrapTable, Button as ReactStrapButton } from \"reactstrap\";\nimport \"./App.css\";\nimport Graph from \"./components/Graph\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport ReactPaginate from \"react-paginate\";\nimport { useDropzone } from \"react-dropzone\";\nimport { CircularProgress, LinearProgress, Table } from \"material-ui\";\nimport { DataGrid, GridColDef } from '@material-ui/data-grid';\nimport Button from '@material-ui/core/Button';\n\ninterface ILogLineProperties {\n  SourceContext: string;\n  ElapsedMilliseconds: number;\n  MetricName: string;\n  WorkItemKey: string;\n  ConcurrentTaskIndex: number;\n  WorkerSessionId: string;\n  WorkerName: string;\n  AssemblyName: string;\n  AssemblyVersion: string;\n  MachineName: string;\n  EnvironmentUserName: string;\n  ApplicationSessionId: string;\n}\n\nclass LogLine {\n  Timestamp: Date = new Date();\n  Level: string = \"\";\n  Message: string = \"\";\n  Exception: string = \"\";\n  Id: number = 0;\n  Properties: ILogLineProperties | null = null;\n  RawLine: string = \"\";\n}\n\nconst format = (str: string, obj: any): string => {\n  Object.keys(obj).forEach((key) => {\n    str = str.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"gi\"), obj[key]);\n  });\n\n  return str;\n};\n\nfunction App() {\n  const versionNumber = \"0.5.3\";\n\n  const fileInput = createRef<HTMLInputElement>();\n  const [fileLines, setFileLines] = useState<string[]>([]);\n  const [logLines, setLogLines] = useState<LogLine[]>([]);\n\n  const [exceptions, setExceptions] = useState(new Map<string, number>());\n  const [workers, setWorkers] = useState(new Map<string, number>());\n  const [applicationSessionIds, setApplicationSessionIds] = useState(\n    new Map<string, number>()\n  );\n  const [applicationSessionIdTimestamps, setApplicationSessionIdTimestamps] =\n    useState(new Map<string, Date>());\n\n  const [loading, setLoading] = useState(false);\n  const [showingClipBoardAlert, setShowingClipBoardAlert] = useState(false);\n\n  const [filterExceptions, setFilterExceptions] = useState<string[]>([]);\n  const [filterExceptionsRegex, setFilterExceptionsRegex] =\n    useState<string>(\"\");\n  const [filterWorkers, setFilterWorkers] = useState<string[]>([]);\n  const [filterApplicationSessionIds, setFilterApplicationSessionIds] =\n    useState<string[]>([]);\n  const [filterStartDate, setFilterStartDate] = useState<Date>(new Date(0));\n  const [filterEndDate, setFilterEndDate] = useState<Date>(new Date(0));\n\n  const [filterExceptionsStaging, setFilterExceptionsStaging] = useState<\n    string[]\n  >([]);\n  const [filterExceptionsRegexStaging, setFilterExceptionsRegexStaging] =\n    useState<string>(\"\");\n  const [filterWorkersStaging, setFilterWorkersStaging] = useState<string[]>(\n    []\n  );\n  const [\n    filterApplicationSessionIdsStaging,\n    setFilterApplicationSessionIdsStaging,\n  ] = useState<string[]>([]);\n  const [filterModified, setFilterModified] = useState(false);\n\n  const [viewLogLines, setViewLogLines] = useState<LogLine[]>([]);\n\n  const [currentPage, setCurrentPage] = useState<number>(0);\n\n  const [loadingProgress, setLoadingProgress] = useState<number>(0);\n  const [loadingTotal, setLoadingTotal] = useState<number>(0);\n\n  const [currentFile, setCurrentFile] = useState(\"\");\n  \n  const workerColumns: GridColDef[] = [\n    { field: \"Count\", headerName: \"Count\", type: \"number\", width: 150 },\n    { field: \"Worker\", headerName: \"Worker\", width: 500 },\n  ]  \n  \n  const exceptionColumns: GridColDef[] = [\n    { field: \"Count\", headerName: \"Count\", type: \"number\", width: 150 },\n    { field: \"Exception\", headerName: \"Exception\", width: 500 },\n  ]\n\n  const onDrop = useCallback((files: File[]) => {\n    if (files.length === 1) {\n      loadFile(files[0]);\n    }\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  useEffect(\n    () => setFilterModified(true),\n    [\n      filterExceptionsStaging,\n      filterExceptionsRegexStaging,\n      filterWorkersStaging,\n      filterApplicationSessionIdsStaging,\n    ]\n  );\n\n  useEffect(() => {\n    if (loading) return;\n\n    var objects = fileLines\n      .filter((l) => l.trim().length > 0)\n      .map<LogLine | null>((l, i) => {\n        try {\n          const obj = JSON.parse(l);\n          return {\n            Timestamp: new Date(obj.Timestamp),\n            Level: obj.Level,\n            Message: format(obj.MessageTemplate, obj.Properties),\n            Exception: obj.Exception,\n            Id: i,\n            Properties: obj.Properties,\n            RawLine: l\n          };\n        } catch {\n          return null;\n        }\n      })\n      .filter((l) => l !== null)\n      .map<LogLine>((l) => l!);\n\n    const newExceptions = new Map<string, number>();\n    const newWorkers = new Map<string, number>();\n    const newApplicationSessionIds = new Map<string, number>();\n\n    for (let log of objects) {\n      if (log.Exception) {\n        let exception = log.Exception.split(\" \")[0];\n        if (newExceptions.has(exception))\n          newExceptions.set(exception, newExceptions.get(exception)! + 1);\n        else newExceptions.set(exception, 1);\n      }\n\n      let worker = (log.Properties?.WorkerName ?? \"General\") + \" \" + log.Level;\n      if (newWorkers.has(worker))\n        newWorkers.set(worker, newWorkers.get(worker)! + 1);\n      else newWorkers.set(worker, 1);\n\n      let applicationSessionId = log.Properties?.ApplicationSessionId ?? \"\";\n      if (newApplicationSessionIds.has(applicationSessionId))\n        newApplicationSessionIds.set(\n          applicationSessionId,\n          newApplicationSessionIds.get(applicationSessionId)! + 1\n        );\n      else newApplicationSessionIds.set(applicationSessionId, 1);\n    }\n\n    setExceptions(newExceptions);\n    setFilterExceptionsStaging(Array.from(newExceptions.keys()));\n\n    setFilterExceptionsRegexStaging(\"\");\n\n    setWorkers(newWorkers);\n    setFilterWorkersStaging(Array.from(newWorkers.keys()));\n\n    setApplicationSessionIds(newApplicationSessionIds);\n    setFilterApplicationSessionIdsStaging(\n      Array.from(newApplicationSessionIds.keys())\n    );\n\n    var newApplicationSessionIdTimestamps = Array.from(\n      newApplicationSessionIds.keys()\n    ).reduce(function (map: Map<string, Date>, sessionId: string) {\n      map.set(\n        sessionId,\n        objects\n          .filter((line) => line.Properties?.ApplicationSessionId === sessionId)\n          .reduce(function (date: Date, line: LogLine) {\n            return line.Timestamp < date ? line.Timestamp : date;\n          }, new Date(9999, 12, 31))\n      );\n\n      return map;\n    }, new Map<string, Date>());\n\n    setApplicationSessionIdTimestamps(newApplicationSessionIdTimestamps);\n\n    if (objects.length > 0) {\n      setFilterStartDate(objects[0].Timestamp);\n      setFilterEndDate(objects[objects.length - 1].Timestamp);\n    }\n    applyFilters();\n\n    setLogLines(objects);\n  }, [fileLines, loading]);\n\n  useEffect(() => {\n    setViewLogLines(\n      logLines.filter(\n        (l) =>\n          (!l.Exception ||\n            filterExceptions.includes(l.Exception.split(\" \")[0])) &&\n          filterWorkers.includes(\n            (l.Properties?.WorkerName ?? \"General\") + \" \" + l.Level\n          ) &&\n          (filterExceptionsRegex.length === 0 ||\n            l.Exception.match(filterExceptionsRegex)) &&\n          filterApplicationSessionIds.includes(\n            l.Properties?.ApplicationSessionId ?? \"\"\n          ) &&\n          filterStartDate !== new Date(0) &&\n          l.Timestamp >= filterStartDate &&\n          filterEndDate !== new Date(0) &&\n          l.Timestamp <= filterEndDate\n      )\n    );\n  }, [\n    logLines,\n    filterExceptions,\n    filterExceptionsRegex,\n    filterWorkers,\n    filterApplicationSessionIds,\n    filterStartDate,\n    filterEndDate,\n  ]);\n\n  const loadFile = (file: File) => {\n    setFileLines([]);\n    const chunkSize = 1024 * 1024 * 100;\n    const totalChunks = file.size / chunkSize + 1;\n    let currentChunk = 0;\n    setCurrentFile(file.name);\n    setLoadingProgress(0);\n    setLoadingTotal(totalChunks);\n    setLoading(true);\n    const reader = new FileReader();\n    reader.addEventListener(\"error\", (event) => {\n      console.error(\"Can not load file\", event);\n      setLoading(false);\n      setFileLines([]);\n      setCurrentPage(0);\n      setCurrentFile(\"\");\n      applyFilters();\n    });\n    reader.addEventListener(\"load\", (event) => {\n      const lines = (event.target?.result as string).split(\"\\n\");\n      setFileLines((l) => [...l, ...lines]);\n      currentChunk++;\n      console.log(currentChunk, totalChunks);\n      if (currentChunk > totalChunks) {\n        setLoading(false);\n        setCurrentPage(0);\n      } else {\n        setLoadingProgress(currentChunk);\n        reader.readAsText(\n          file.slice(\n            currentChunk * chunkSize,\n            Math.min(currentChunk * chunkSize + chunkSize, file.size)\n          )\n        );\n      }\n    });\n\n    reader.readAsText(file.slice(0, Math.min(file.size, chunkSize)));\n  };\n\n  const applyFilters = () => {\n    setFilterExceptions([...filterExceptionsStaging]);\n    setFilterExceptionsRegex(filterExceptionsRegexStaging);\n    setFilterWorkers([...filterWorkersStaging]);\n    setFilterApplicationSessionIds([...filterApplicationSessionIdsStaging]);\n    setFilterModified(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"0px\",\n          top: \"0px\",\n          color: \"lightgray\",\n        }}\n      >\n        v{versionNumber}\n      </div>\n      <Alert color=\"success\" className=\"alert\" isOpen={showingClipBoardAlert}>\n          Log line was copied to clipboard.\n      </Alert>\n      <div>\n        <div {...getRootProps()} className=\"dropzone\">\n          <input\n            type=\"file\"\n            ref={fileInput}\n            disabled={loading}\n            accept=\".json\"\n            {...getInputProps()}\n          />\n          {isDragActive\n            ? \"Drop file here\"\n            : \"Click or drag and drop files here\"}\n        </div>\n        <div>{currentFile}</div>\n      </div>\n      {loading ? (\n        <div style={{ width: \"70%\" }}>\n          <CircularProgress />\n          <LinearProgress\n            value={(loadingProgress / loadingTotal) * 100}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        <div style={{ width: \"100%\" }}>\n          <Graph LogLines={viewLogLines} Workers={filterWorkers} />\n          <div className=\"accordion\" id=\"settingsAccordion\">\n            <Button onClick={() => applyFilters()} disabled={!filterModified}>\n              Apply settings\n            </Button>\n            <div className=\"card\">\n              <div className=\"card-header\" id=\"exceptionsHeading\">\n                <h2 className=\"mb-0\">\n                  <button\n                    className=\"btn btn-link collapsed\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#exceptionsCollapse\"\n                    aria-expanded=\"true\"\n                    aria-controls=\"exceptionsCollapse\"\n                  >\n                    Exceptions\n                  </button>\n                </h2>\n              </div>\n\n              <div\n                id=\"exceptionsCollapse\"\n                className=\"collapse\"\n                aria-labelledby=\"exceptionsHeading\"\n                data-parent=\"#settingsAccordion\"\n              >\n                <div className=\"card-body\" style={{height: 400}}>\n                  <div>\n                    <Label>Regex: </Label>\n                    <Input\n                      onChange={(e) =>\n                        setFilterExceptionsRegexStaging(e.target.value)\n                      }\n                      value={filterExceptionsRegexStaging}\n                    />{\" \"}\n                  </div>\n                <DataGrid \n                    columns={exceptionColumns} \n                    rows={Array.from(exceptions.keys())\n                          .sort()\n                          .map((k) => ({Count: exceptions.get(k), Exception: k, id: k }))} \n                    checkboxSelection\n                    onSelectionModelChange = { (e) => {\n                      setFilterExceptions(e.map(i => i.toString()));\n                      }\n                    }\n                    />\n                </div>\n              </div>\n            </div>\n            <div className=\"card\">\n              <div className=\"card-header\" id=\"workersHeading\">\n                <h2 className=\"mb-0\">\n                  <button\n                    className=\"btn btn-link collapsed\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#workersCollapse\"\n                    aria-expanded=\"true\"\n                    aria-controls=\"workersCollapse\"\n                  >\n                    Workers\n                  </button>\n                </h2>\n              </div>\n\n              <div\n                id=\"workersCollapse\"\n                className=\"collapse\"\n                aria-labelledby=\"workersHeading\"\n                data-parent=\"#settingsAccordion\"\n              >\n                <div className=\"card-body\" style={{height: 400}}>\n                  <DataGrid \n                    columns={workerColumns} \n                    rows={Array.from(workers.keys())\n                          .sort()\n                          .map((k) => ({Count: workers.get(k), Worker: k, id: k }))} \n                    checkboxSelection\n                    onSelectionModelChange = { (e) => {\n                      setFilterWorkers(e.map(i => i.toString()));\n                      }\n                    }\n                    />\n                </div>\n              </div>\n              <div className=\"card\">\n                <div className=\"card-header\" id=\"exceptionsHeading\">\n                  <h2 className=\"mb-0\">\n                    <button\n                      className=\"btn btn-link collapsed\"\n                      type=\"button\"\n                      data-toggle=\"collapse\"\n                      data-target=\"#applicationSessionIdsCollapse\"\n                      aria-expanded=\"true\"\n                      aria-controls=\"applicationSessionIdsCollapse\"\n                    >\n                      Application Session Ids\n                    </button>\n                  </h2>\n                </div>\n\n                <div\n                  id=\"applicationSessionIdsCollapse\"\n                  className=\"collapse\"\n                  aria-labelledby=\"applicationSessionIdsHeading\"\n                  data-parent=\"#settingsAccordion\"\n                >\n                  <div className=\"card-body\">\n                    <ReactStrapTable striped bordered>\n                      <thead>\n                        <tr>\n                          <td width=\"10%\">Count</td>\n                          <td width=\"auto\">Application Session Id</td>\n                          <td width=\"auto\">Start time</td>\n                          <td width=\"5%\">\n                            <div\n                              style={{ display: \"flex\", flexDirection: \"row\" }}\n                            >\n                              <ReactStrapButton\n                                outline\n                                size=\"sm\"\n                                color=\"secondary\"\n                                style={{ marginRight: 5 }}\n                                onClick={() =>\n                                  setFilterApplicationSessionIdsStaging([])\n                                }\n                              >\n                                ☐\n                              </ReactStrapButton>\n                              <ReactStrapButton\n                                outline\n                                size=\"sm\"\n                                color=\"success\"\n                                onClick={() =>\n                                  setFilterApplicationSessionIdsStaging(\n                                    Array.from(applicationSessionIds.keys())\n                                  )\n                                }\n                              >\n                                ☑\n                              </ReactStrapButton>\n                            </div>\n                          </td>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {Array.from(applicationSessionIds.keys())\n                          .sort((a, b) =>\n                            applicationSessionIdTimestamps.get(a)! >\n                            applicationSessionIdTimestamps.get(b)!\n                              ? -1\n                              : 1\n                          )\n                          .map((k) => (\n                            <tr key={k}>\n                              <td>{applicationSessionIds.get(k)}</td>\n                              <td>{k}</td>\n                              <td>\n                                {applicationSessionIdTimestamps\n                                  .get(k)\n                                  ?.toString()}\n                              </td>\n                              <td>\n                                <Input\n                                  type=\"checkbox\"\n                                  className=\"tableCheckbox\"\n                                  checked={filterApplicationSessionIdsStaging.includes(\n                                    k\n                                  )}\n                                  onChange={(e) => {\n                                    if (e.target.checked)\n                                      setFilterApplicationSessionIdsStaging([\n                                        ...filterApplicationSessionIdsStaging,\n                                        k,\n                                      ]);\n                                    else\n                                      setFilterApplicationSessionIdsStaging([\n                                        ...filterApplicationSessionIdsStaging.filter(\n                                          (s) => s !== k\n                                        ),\n                                      ]);\n                                  }}\n                                />\n                              </td>\n                            </tr>\n                          ))}\n                      </tbody>\n                    </ReactStrapTable>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          Events:\n          <br />\n          {\"Start Time: \"}\n          <DatePicker\n            selected={\n              filterStartDate ??\n              (logLines.length > 0 ? logLines[0].Timestamp : new Date())\n            }\n            onChange={(date) => {\n              if (date instanceof Date) setFilterStartDate(date);\n            }}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            dateFormat=\"dd.MM.yyyy HH:mm\"\n          />\n          <Button onClick={() => setFilterStartDate(logLines[0].Timestamp)}>\n            Clear\n          </Button>\n          <br />\n          {\"End Time: \"}\n          <DatePicker\n            selected={\n              filterEndDate ??\n              (logLines.length > 0\n                ? logLines[logLines.length - 1].Timestamp\n                : new Date())\n            }\n            onChange={(date) => {\n              if (date instanceof Date) setFilterEndDate(date);\n            }}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            dateFormat=\"dd.MM.yyyy HH:mm\"\n          />\n          <Button\n            onClick={() =>\n              setFilterEndDate(logLines[logLines.length - 1].Timestamp)\n            }\n          >\n            Clear\n          </Button>\n          <br />\n          Filtered {viewLogLines.length} out of {logLines.length}\n          <br />\n          Showing {currentPage * 1000} ...{\" \"}\n          {Math.min(viewLogLines.length - currentPage * 1000, 1000) +\n            currentPage * 1000}\n          <ReactPaginate\n            pageCount={viewLogLines.length / 1000}\n            onPageChange={(s) => {\n              setCurrentPage(s.selected);\n            }}\n            forcePage={currentPage}\n            disableInitialCallback={true}\n            pageRangeDisplayed={3}\n            marginPagesDisplayed={1}\n            breakClassName={\"page-item\"}\n            breakLinkClassName={\"page-link\"}\n            containerClassName={\"pagination\"}\n            pageClassName={\"page-item\"}\n            pageLinkClassName={\"page-link\"}\n            previousClassName={\"page-item\"}\n            previousLinkClassName={\"page-link\"}\n            nextClassName={\"page-item\"}\n            nextLinkClassName={\"page-link\"}\n            activeClassName={\"active\"}\n          />\n          <Table>\n            <thead>\n              <tr>\n                <td width=\"5%\">#</td>\n                <td width=\"10%\">Time</td>\n                <td width=\"10%\">Level</td>\n                <td width=\"10%\">Work Item</td>\n                <td width=\"20%\">Message</td>\n                <td width=\"auto\">Exception</td>\n              </tr>\n            </thead>\n            <tbody>\n              {viewLogLines\n                .filter(\n                  (_, i) =>\n                    i >= currentPage * 1000 && i < (currentPage + 1) * 1000\n                )\n                .map((l) => (\n                  <tr key={l.Id} className={\"logRow \" + l.Level}>\n                    <td>\n                      <p style={{ wordWrap: \"break-word\" }}>{l.Id}</p>\n                      <div>\n                        <Button\n                          onClick={() => {\n                            navigator.clipboard.writeText(l.RawLine);\n                            setShowingClipBoardAlert(true);\n                            setTimeout(() => {\n                              setShowingClipBoardAlert(false);\n                            }, 1500);\n                          }}\n                        >\n                          Copy\n                        </Button>\n                      </div>\n                    </td>\n                    <td>\n                      <p style={{ wordWrap: \"break-word\" }}>\n                        {l.Timestamp.toLocaleString()}\n                      </p>\n                    </td>\n                    <td>\n                      <div>\n                        <p style={{ wordWrap: \"break-word\" }}>{l.Level}</p>\n                        <p style={{ wordWrap: \"break-word\" }}>\n                          {l.Properties?.MetricName}\n                        </p>\n                        <p style={{ wordWrap: \"break-word\" }}>\n                          {l.Properties?.ConcurrentTaskIndex}\n                        </p>\n                      </div>\n                    </td>\n                    <td>\n                      <p style={{ wordWrap: \"break-word\" }}>\n                        {l.Properties?.WorkItemKey ?? \"*\"}\n                      </p>\n                    </td>\n                    <td>\n                      <p style={{ wordWrap: \"break-word\" }}>{l.Message}</p>\n                    </td>\n                    <td>\n                      <p\n                        style={{\n                          wordWrap: \"break-word\",\n                          whiteSpace: \"break-spaces\",\n                        }}\n                      >\n                        {l.Exception}\n                      </p>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n          <ReactPaginate\n            pageCount={viewLogLines.length / 1000}\n            onPageChange={(s) => {\n              setCurrentPage(s.selected);\n              document.getElementById(\"mainTable\")?.scrollIntoView();\n            }}\n            forcePage={currentPage}\n            disableInitialCallback={true}\n            pageRangeDisplayed={3}\n            marginPagesDisplayed={1}\n            breakClassName={\"page-item\"}\n            breakLinkClassName={\"page-link\"}\n            containerClassName={\"pagination\"}\n            pageClassName={\"page-item\"}\n            pageLinkClassName={\"page-link\"}\n            previousClassName={\"page-item\"}\n            previousLinkClassName={\"page-link\"}\n            nextClassName={\"page-item\"}\n            nextLinkClassName={\"page-link\"}\n            activeClassName={\"active\"}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport { App, LogLine };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <MuiThemeProvider>\r\n        <App />\r\n      </MuiThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}